pipeline {
  agent {
    node {
        label 'master'
    }
  }
  stages {
    stage('Git clone') {
        steps{
            git poll: false, branch: 'sunandan-dev', url: 'https://github.com/kumarRaj/stocks.git'
        }
    }
    stage('Terraform Init') {
      steps {
        dir("deployment/"){
          withEnv(['terraform=/usr/local/bin/terraform']) {
            withCredentials([usernamePassword(credentialsId: 'AWS_ACCESS_KEY_ID_Credential', passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY_ID')]) {
                sh "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} ${terraform} init"
            }
          }
        }
      }
    }
    stage('Terraform Plan') {
      steps {
        dir("deployment/"){
          withEnv(['terraform=/usr/local/bin/terraform']) {
            withCredentials([usernamePassword(credentialsId: 'AWS_ACCESS_KEY_ID_Credential', passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY_ID')]) {
              sh "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} ${terraform} plan"
            }
          }
        }
      }
    }
    stage('Terraform Apply') {
      steps {
        input 'Apply Plan'
        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
          dir("deployment/"){
            withEnv(['terraform=/usr/local/bin/terraform']) {
              withCredentials([usernamePassword(credentialsId: 'AWS_ACCESS_KEY_ID_Credential', passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY_ID')]) {
                sh "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} ${terraform} apply -auto-approve"
              }
            }
          }
        }
      }
    }
    stage('Terraform Output') {
      steps {
        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
          dir("deployment/"){
            withEnv(['terraform=/usr/local/bin/terraform']) {
              withCredentials([usernamePassword(credentialsId: 'AWS_ACCESS_KEY_ID_Credential', passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY_ID')]) {
                sh "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} ${terraform} output"
              }
            }
          }
        }
      }
    }
    stage('Copy terraform local state files'){
      steps{
        dir("deployment/"){
          sh '''
            mkdir -p ~/terraform/backup/
            cp -r ./. ~/terraform/backup/
          '''
        }
      }
    }
  }
}