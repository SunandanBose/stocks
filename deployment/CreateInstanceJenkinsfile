pipeline {
  agent {
    node {
        label 'master'
    }
  }
  stages {
    stage('Clean Worspace'){
        steps{
            deleteDir()
        }
    }
    stage('Git clone') {
        steps{
            git poll: false, branch: 'configureS3', url: 'https://github.com/kumarRaj/stocks.git'
        }
    }
    stage('Terraform Init') {
      steps {
        dir("deployment/"){
          withEnv(['terraform=/usr/local/bin/terraform']) {
            withCredentials([usernamePassword(credentialsId: 'AWS_ACCESS_KEY_ID_Credential', passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY_ID')]) {
                sh "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} ${terraform} init"
            }
          }
        }
      }
    }
    stage('Terraform Plan') {
      steps {
        dir("deployment/"){
          withEnv(['terraform=/usr/local/bin/terraform']) {
            withCredentials([usernamePassword(credentialsId: 'AWS_ACCESS_KEY_ID_Credential', passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY_ID')]) {
              sh "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} ${terraform} plan"
            }
          }
        }
      }
    }
    stage('Terraform Apply') {
      steps {
        input 'Apply Plan'
        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
          dir("deployment/"){
            withEnv(['terraform=/usr/local/bin/terraform']) {
              withCredentials([usernamePassword(credentialsId: 'AWS_ACCESS_KEY_ID_Credential', passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY_ID')]) {
                sh "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} ${terraform} apply -auto-approve"
              }
            }
          }
        }
      }
    }
    stage('Copy terraform local state files'){
      steps{
        dir("deployment/"){
          sh '''
            mkdir -p ~/terraform/backup/
            cp -r ./. ~/terraform/backup/
          '''
        }
      }
    }
    stage('Terraform Output') {
      steps {
        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
          dir("deployment/"){
            withEnv(['terraform=/usr/local/bin/terraform']) {
              withCredentials([usernamePassword(credentialsId: 'AWS_ACCESS_KEY_ID_Credential', passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY_ID')]) {
                sh '''
                touch ./instance_info.properties
                backendIP=$(AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} ${terraform} output -raw instance_backend_public_ip)
                echo "backendIP = ${backendIP}" > ./instance_info.properties
                '''
              }
            }
          }
        }
      }
    }
    stage('Launch Backend Application'){
    steps{
      script{
        properties = readProperties file: './deployment/instance_info.properties'
        build job: 'Start_Spring_Application', parameters: [string(name: 'IPAddress', value: properties['backendIP']), string(name: 'instanceUser', value: 'ubuntu')]
      }
    }
    }
    stage('Launch UI Application'){
      steps{
        script{
          properties = readProperties file: './deployment/instance_info.properties'
          build job: 'Launch_UI_Application', parameters: [string(name: 'IPAddress', value: properties['backendIP'])]
        }
      }
     }
  }
}